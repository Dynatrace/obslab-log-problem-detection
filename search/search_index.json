{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Using Dynatrace to Detect Problems in Logs","text":"<p>In this hands-on demo, you will send logs from the OpenTelemetry demo application to Dynatrace.</p> <p>You will induce a problem which Dynatrace DAVIS will detect and thus raise a problem report based on the Observability data.</p> <p>The logs include span and trace IDs meaning you will be easily able to drill between signal types to see logs in the context of the distributed trace and vice versa.</p> <p>Tip</p> <p>Right click and \"open image in new tab\" to see large image</p> <p></p>"},{"location":"#how-is-the-problem-created","title":"How is the problem created?","text":"<p>You will release a new feature into production. For demo purposes, this new feature intentionally introduces failure into the system.</p> <p>First you will inform Dynatrace that a change is incoming. This will be done by sending a <code>CUSTOM_CONFIGURATION</code> event to Dynatrace. Then the feature will be enabled by toggling a feature flag.</p> <p>After a few moments, the error will occur. The <code>ERROR</code> logs flowing into Dynatrace will trigger the problem.</p> <p>This demo uses the OpenTelemetry demo application and the Dynatrace OpenTelemetry collector distribution (why might I want to use the Dynatrace OTEL Collector?).</p>"},{"location":"#logical-flow","title":"Logical Flow","text":""},{"location":"#compatibility","title":"Compatibility","text":"Deployment Tutorial Compatible Dynatrace Managed \u274c Dynatrace SaaS \u2714\ufe0f <ul> <li>Click Here to Begin </li> </ul>"},{"location":"access-ui/","title":"4. Access User Interface","text":""},{"location":"access-ui/#access-the-demo-user-interface","title":"Access The Demo User Interface","text":"<p>Tip</p> <p>This step is optional because there is a load generator already running. Observability data will be flowing into Dynatrace.</p> <p>Expose the user interface on port 8080 by port-forwarding:</p> <pre><code>kubectl -n default port-forward svc/my-otel-demo-frontendproxy 8080:8080\n</code></pre> <p>Go to the <code>Ports</code> tab, right click the port <code>8080</code> and choose <code>Open in Browser</code>.</p> <p>You should see the OpenTelemetry demo application.</p> <p></p> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"build-openpipeline-alert/","title":"6. Build OpenPipeline Alert","text":"<p>Telemetry is flowing into Dynatrace. Logs and spans are being enriched with metadata from both the Kubernetes API and custom pod annotations that we've added to the <code>cartservice</code>.</p> <p>As the developer, you already know that if an error log occurs that contains the content:</p> <pre><code>Wasn't able to connect to Redis.\n</code></pre> <p>This is serious enough that you immediately want an alert. So you've added the following rule to the collector:</p> <pre><code>processors:\n  transform:\n    log_statements:\n      - context: log\n        statements:\n          - set(attributes[\"alertme\"], \"true\")\n            where resource.attributes[\"service.name\"] == \"cartservice\"\n            and IsMatch(body, \"(?i)wasn't able to connect to redis.*\")\n</code></pre> <p>This uses the transform processor to act on each log line, as it flows through the collector.</p> <p>Read the rule as follows:</p> <ul> <li>If the log originates from the <code>cartservice</code></li> <li>and the log line contains the phrase <code>wasn't able to connect to redis</code> (case insensitive)</li> <li>add a new attribute called <code>alertme</code> and set the value to <code>\"true\"</code></li> </ul> <p>In other words, the following log line would not be modified:</p> <p>input <pre><code>{\n    \"status\": \"INFO\",\n    \"content\": \"some log line text here\"\n}\n</code></pre></p>"},{"location":"cleanup/","title":"9. Cleanup","text":"<p>To cleanup resources, go to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token.</p> <ul> <li>What's Next? </li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#dynatrace-environment","title":"Dynatrace Environment","text":"<p>You must have access to a Dynatrace SaaS environment.Sign up here</p> <p>Save the Dynatrace environment URL:</p> <ul> <li>Without the trailing slash</li> <li>Without <code>.apps.</code> in the URL</li> </ul> <p>The generic format is:</p> <pre><code>https://&lt;EnvironmentID&gt;.&lt;Environment&gt;.&lt;URL&gt;\n</code></pre> <p>For example: <pre><code>https://abc12345.live.dynatrace.com\n</code></pre></p>"},{"location":"getting-started/#custom-runbook","title":"Custom Runbook","text":"<p>Info</p> <p>As the developer responsible for the cartservice, if problems occur, you're the best person to know how to resolve the issue.</p> <p>To help your colleagues, you have prebuilt a notebook which will be useful as a runbook if / when problems occur.</p> <p>You want to make this notebook automatically available whenever problems with the <code>cartservice</code> occur.</p> <p>Download the file Redis Troubleshooting.json and save to your computer.</p> <p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>notebooks</code></li> <li>Open the app and find the <code>Upload</code> button at the top of the page</li> <li>Upload the JSON file you previously downloaded</li> </ul> <p></p> <ul> <li>Make a note of the notebook ID from the URL bar</li> </ul> <p>Warning</p> <p>Your environment and notebook IDs will be different.</p> <p></p>"},{"location":"getting-started/#install-new-problems-app","title":"Install New Problems App","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>Hub</code>.</li> <li>Open the <code>Problems</code> app and click <code>Install</code></li> </ul> <p></p> <p></p>"},{"location":"getting-started/#create-openpipeline","title":"Create OpenPipeline","text":""},{"location":"getting-started/#define-new-log-pipeline","title":"Define New Log Pipeline","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>OpenPipeline</code>. Open the app</li> <li>Ensure <code>Logs</code> is selected and select the <code>Pipelines</code> tab</li> </ul> <p></p> <ul> <li>Click <code>+ Pipeline</code> to create a new log ingest pipeline.</li> <li>Click the pencil icon and rename the pipeline to <code>Redis Pipeline</code></li> <li>Change to the <code>Data extraction</code> tab and add a new <code>Davis event</code> processor</li> </ul> <p> </p> <ul> <li>Provide any name you like</li> <li>Set the <code>Matching condition</code> to <code>alertme == \"true\"</code></li> <li>Set the <code>Event name</code> to:</li> </ul> <pre><code>[{dt.owner}] Redis connection failed\n</code></pre> <ul> <li>Set the <code>Event description</code> to:</li> </ul> <pre><code>{supportInfo}\n</code></pre> <ul> <li>Set the <code>event.type</code> property to:</li> </ul> <pre><code>ERROR_EVENT\n</code></pre> <ul> <li> <p>Add 3 new properties:</p> <ul> <li><code>dt.owner</code> with value: <code>{dt.owner}</code></li> <li><code>dt.cost.costcenter</code> with value: <code>{dt.cost.costcenter}</code></li> <li><code>dt.cost.product</code> with value: <code>{dt.cost.product}</code></li> </ul> </li> </ul> <p>Save it!</p> <p>Don't forget to click <code>Save</code> to save the pipeline</p> <p></p> <p></p>"},{"location":"getting-started/#create-pipeline-routing-rule","title":"Create Pipeline Routing Rule","text":"<p>Create a dynamic routing rule to tell Dynatrace to redirect only certain logs through the Redis pipeline.</p> <ul> <li>Switch to the <code>Dynamic routing</code> tab</li> <li>Click <code>+ Dynamic route</code></li> <li>Name the route whatever you like</li> <li>Set the <code>Matching condition</code> to:</li> </ul> <pre><code>service.name == \"cartservice\" and\ndt.owner == \"teamA\"\n</code></pre> <ul> <li>Click <code>Add</code></li> </ul> <p>Save it!</p> <p>Don't forget to click <code>Save</code> to save the dynamic route</p> <p> </p> <p>Success</p> <p>The pipeline is configured.</p> <p>Logs flowing into dynatrace from the <code>cartservice</code> and owned by <code>teamA</code> will be processed via your custom pipeline.</p> <p>If any of those individual log lines contain a K/V pair of <code>alertme: true</code> a problem will be raised in Dynatrace.</p>"},{"location":"getting-started/#create-api-token","title":"Create API Token","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>access tokens</code>.</li> <li>Create a new access token with the following permissions:<ul> <li><code>logs.ingest</code></li> <li><code>metrics.ingest</code></li> <li><code>openTelemetryTrace.ingest</code></li> <li><code>events.ingest</code></li> </ul> </li> </ul>"},{"location":"getting-started/#api-token-permissions-explained","title":"API Token Permissions Explained","text":"<ul> <li><code>logs.ingest</code>, <code>metrics.ingest</code> and <code>openTelemetryTrace.ingest</code> are required to send the relevant telemetry data into Dynatrace</li> <li><code>events.ingest</code> is required to send the <code>CUSTOM_CONFIGURATION</code> event into Dynatrace</li> </ul>"},{"location":"getting-started/#start-demo","title":"Start Demo","text":"<p>You've done the hard work! It is time to spin up the demo environment.</p> <p>Click this button to open the demo environment. This will open in a new tab.</p> <p></p> <ul> <li>Fill in the form with the details you've already gathered.</li> <li>Click <code>Create codespace</code></li> <li>Proceed to the next documentation step with the link below.</li> </ul> <p></p> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"installation-explained/","title":"3. Installation Explained","text":""},{"location":"installation-explained/#hurry-up-and-wait","title":"Hurry up and wait","text":"<p>Grab a Coffee</p> <p>Everything is installing. This can take a while.</p> <p>The OpenTelemetry demo and the Dynatrace collector will be installed automatically.</p> <p>The Dynatrace details you provided during startup will be encrypted, stored in GitHub secrets and made available as environment variables (hint: <code>printenv</code> to see).</p> <p>They will also be stored in a Kubernetes secret:</p> <pre><code>kubectl get secret/dynatrace-otelcol-dt-api-credentials -o yaml\n</code></pre>"},{"location":"installation-explained/#wait-for-system","title":"Wait for System","text":"<p>Wait here until the terminal prompt looks like this (your username will differ).</p> <p></p>"},{"location":"installation-explained/#wait-for-application","title":"Wait for Application","text":"<p>The Kubernetes cluster is available and the application is starting.</p> <p>Wait for all pods to be Ready (can take up to 10mins)</p> <pre><code>kubectl wait --for condition=Ready pod --timeout=10m --all\n</code></pre> <p>The command will appear to hang until all pods are available.</p> <p>When all pods are running, the output will look like this:</p> <pre><code>pod/dynatrace-collector-opentelemetry-collector-******-**** condition met\npod/my-otel-demo-accountingservice-******-**** condition met\npod/my-otel-demo-adservice-******-**** condition met\npod/my-otel-demo-cartservice-******-**** condition met\npod/my-otel-demo-checkoutservice-******-**** condition met\npod/my-otel-demo-currencyservice-******-**** condition met\npod/my-otel-demo-emailservice-******-**** condition met\npod/my-otel-demo-flagd-******-**** condition met\npod/my-otel-demo-frauddetectionservice-******-**** condition met\npod/my-otel-demo-frontend-******-**** condition met\npod/my-otel-demo-frontendproxy-******-**** condition met\npod/my-otel-demo-imageprovider-******-**** condition met\npod/my-otel-demo-kafka-******-**** condition met\npod/my-otel-demo-loadgenerator-******-**** condition met\npod/my-otel-demo-paymentservice-******-**** condition met\npod/my-otel-demo-productcatalogservice-******-**** condition met\npod/my-otel-demo-prometheus-server-******-**** condition met\npod/my-otel-demo-quoteservice-******-**** condition met\npod/my-otel-demo-recommendationservice-******-**** condition met\npod/my-otel-demo-shippingservice-******-**** condition met\npod/my-otel-demo-valkey-******-**** condition met\n</code></pre> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"introduce-change/","title":"7. Introduce System Change","text":"<p>The application is running correctly. It is time to introduce a change into the system.</p> <p>This simulates releasing new functionality to your users in production.</p>"},{"location":"introduce-change/#inform-dynatrace","title":"Inform Dynatrace","text":"<p>First, inform Dynatrace that a change is about to occur. Namely, you are going to make a change to the <code>my-otel-demo-cartservice</code> service  by changing the <code>cartServiceFailure</code> feature flag from <code>off</code> to <code>on</code>.</p> <p>Tell Dynatrace about the upcoming change by sending an event (note: This event does not actually make the change; you need to do this).</p> <p>Run the following:</p> <pre><code>./runtimeChange.sh my-otel-demo-cartservice cartServiceFailure on\n</code></pre> <p>Refresh the <code>my-otel-demo-cartservice</code> page and near the bottom you should see the configuration change event.</p> <p></p>"},{"location":"introduce-change/#make-change","title":"Make Change","text":"<p>Open this file: <code>flags.yaml</code></p> <p>Change the <code>defaultValue</code> of <code>cartServiceFailure</code> from <code>\"off\"</code> to <code>\"on\"</code> (scroll to line <code>75</code>)</p> <p></p> <p>Now apply the change by running this command:</p> <pre><code>kubectl apply -f $CODESPACE_VSCODE_FOLDER/flags.yaml\n</code></pre> <p>You should see:</p> <pre><code>configmap/my-otel-demo-flagd-config configured\n</code></pre> <p>Be Patient</p> <p>The application will now generate errors when emptying the users cart. It will do this 1/10th of the time, so be patient, it can take a few moments for the errors to occur.</p>"},{"location":"introduce-change/#generate-your-own-traffic","title":"Generate Your Own Traffic","text":"<p>There is a load generator running, but you can generate traffic by accessing the site.</p> <p>See access user interface</p> <p>Repeatedly add an item to your cart, go to the cart and empty it. Hope you're \"lucky\" that you generate a backend failure.</p>"},{"location":"introduce-change/#open-problems-app","title":"Open Problems App","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>problems</code></li> <li>Open the problems app</li> </ul> <p>Wait for the problem to appear.</p> <p>You can also open the <code>my-otel-demo-cartservice</code> Service screen to monitor for failures.</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>Services</code></li> <li>Open the services app + navigate to the <code>my-otel-demo-cartservice</code></li> <li>Monitor the <code>Failed requests</code> chart</li> </ul> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#why-would-i-use-the-dynatrace-otel-collector","title":"Why would I use the Dynatrace OTEL Collector?","text":"<p>See here.</p>"},{"location":"review-problem/","title":"8. Review Problem","text":"<p>Tip</p> <p>Right click each image and \"Open image in new tab\" to see a larger version.</p> <p>After a few moments, DAVIS will detect the issue and create a problem.</p> <p>Question</p> <p>Let's see what Dynatrace can tell us about this issue...</p> <p>Press <code>ctrl + k</code> and search for <code>Problems</code> this will open the problems screen.</p> <p>You should see a problem titled: <code>Redis connection errors</code></p> <p></p>"},{"location":"review-problem/#explore-problem-details","title":"Explore Problem Details","text":"<p>Opening the problem record, you will see that it has effected one entity: the <code>my-otel-demo-cartservice</code>.</p> <p>Navigate to the <code>Logs</code> panel. Click <code>Run query</code> next to <code>Show x errors</code> (your number of errors may differ from the screenshot)</p> <p></p>"},{"location":"review-problem/#logs-contain-key-metadata","title":"Logs Contain Key Metadata","text":"<p>Expand the log entry and notice you have some key metadata available:</p> <ul> <li>Timestamp of this log line</li> <li><code>host.name</code> (which equates to the container name)</li> <li><code>loglevel</code> ie. <code>ERROR</code></li> <li>OpenTelemetry <code>span_id</code> and <code>trace_id</code></li> <li>Ownership information: <code>dt.owner</code></li> <li>Cost information: <code>dt.cost.product</code> and <code>dt.cost.costcenter</code></li> </ul> <p></p>"},{"location":"review-problem/#what-happened-leading-to-this-error","title":"What Happened Leading to this Error?","text":"<p>Now click <code>Show surrounding logs</code> this shows <code>ALL</code> log lines with the same <code>trace_id</code>.</p> <p>You can also choose <code>based on topology</code> to see the error in context of all other logs on that service at the time of the error.</p> <p>This means you can see precisely what led up to the failure. In this case:</p> <ul> <li>The system retrieved the cart contents</li> <li>A pricing quote was calculated</li> <li>The system performed a currency conversion</li> <li>The user requested to empty their cart</li> <li>The error occured whilst trying to empty the cart</li> </ul> <p></p> <p>Notice that an Error status code and detailed message is also available:</p> <ul> <li>The <code>statuscode</code> is <code>FailedPrecondition</code></li> <li>The <code>detail</code> provides an error message: <code>Can't access cart storage. System.ApplicationException: Wasn't able to connect to redis...</code></li> <li>The <code>detail</code> field also provides a reference to the line of code (LOC) where this error occured.</li> </ul> <p></p>"},{"location":"review-problem/#navigate-from-log-to-trace","title":"Navigate from Log to Trace","text":"<p>In this demo application logs, spans and traces are all correctly instrumented with the <code>span_id</code> and <code>trace_id</code> field. Meaning logs can be correlated and linked to traces.</p> <p>Let's navigate from the log line to the trace view to get a wider view of the error and what hte user was trying to do during this action.</p> <ul> <li>Click the value field of the <code>trace_id</code>. This should open the <code>Explore</code> context menu.</li> <li>Select <code>Open field with</code> (<code>open record with</code> also opens the trace but \"jumps\" you down the trace to the error location)</li> <li>Choose to open with the <code>Distributed traces</code> app</li> </ul> <p> </p> <p>The trace view gives a deeper, more contextual view of what we've already seen from the logs.</p> <p>The user tries to place an order, there are currency conversions and quotations occurring. Finally the <code>EmptyCart</code> method is called, which fails.</p> <p></p>"},{"location":"review-problem/#runbook-wheres-the-runbook","title":"Runbook! Where's the runbook!?","text":"<p>Recall that the developer provided us with a handy runbook.</p> <p>Navigate back to the problem and notice the problem description contains a link to the Ops runbook.</p> <p></p> <p>Follow the link to the runbook.</p>"},{"location":"review-problem/#immediate-action","title":"Immediate Action","text":"<p>The first section of the runbook provides clear instructions on what to do and who to contact.</p>"},{"location":"review-problem/#chart-1-error-trend","title":"Chart 1: Error Trend","text":"<p>Re-run sections</p> <p>You may need to re-run the sections to refresh the data. Just click each chart and click the <code>Run</code> button</p> <p>The first chart shows a increased failure rate for the <code>cartservice</code>.</p> <p>OK, we're on to something...</p> <p>DAVIS told us (and our investigation confirmed) that the problem originated in the <code>cartservice</code>.</p> <p>We know that the problem was caused by a failure to connect to Redis. But what caused that error? Did something change?</p>"},{"location":"review-problem/#chart-2-change-caused-the-failure","title":"Chart 2: Change Caused the Failure","text":"<p>Chart two shows both configuration events and problems on the same chart.</p> <p></p> <p>Change is the cause of most failures</p> <p>Something changed on the <code>cartservice</code> immediately prior to an issue occuring.</p> <p>Thanks to the \"configuration changed\" event we have all necessary information to understand the true root cause.</p> <p> </p> <p>\ud83c\udf89Congratulations \ud83c\udf89</p> <p>You have successfully completed this Observability Lab. Continue below to clean up your environment.</p> <ul> <li>Click Here to Begin </li> </ul>"},{"location":"view-observability-data/","title":"5. Validate Observability Data","text":"<p>In Dynatrace, press <code>ctrl + k</code> and search for <code>Services</code>. Dynatrace creates service entities based on the incoming span data. The logs are also available for some services</p> <p>In this demo, you will be focussing on the <code>Cart</code>  which does have logs and is written in <code>.NET</code>.</p> <p>You can also query data via notebooks and dashboards (<code>ctrl + k</code> and search for <code>notebooks</code> or <code>dashboards</code>).</p> <p>For example, to validate logs are available for <code>cartservice</code>, use one of the following methods:</p>"},{"location":"view-observability-data/#use-the-logs-app","title":"Use the logs app","text":"<ul> <li>Open the <code>logs</code> app.</li> <li>Click the <code>+</code> icon and add a filter for <code>service.name</code> with a value <code>cartservice</code></li> <li>Run the query to see the latest <code>cartservice</code> logs</li> </ul>"},{"location":"view-observability-data/#use-the-services-screen","title":"Use the services screen","text":"<ul> <li>Open the <code>my-otel-demo-cartservice</code> service screen</li> <li>Click <code>Run query</code> on the logs panel</li> </ul>"},{"location":"view-observability-data/#use-the-notebooks-app","title":"Use the notebooks app","text":"<ul> <li>Open the <code>notebooks</code> app</li> <li>Add a Dynatrace Query Language (DQL) tile</li> <li>Use the following DQL query:</li> </ul> <pre><code>fetch logs\n| filter service.name == \"cartservice\"\n| limit 10\n</code></pre> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"whats-next/","title":"11. What's Next?","text":"<p>Content here about what the user should do, where they should and what they could learn next.</p>"}]}