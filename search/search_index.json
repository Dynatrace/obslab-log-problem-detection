{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Using Dynatrace to Detect Problems in Logs","text":"<p>In this hands-on demo, you will send logs from the OpenTelemetry demo application to Dynatrace.</p> <p>You will induce a problem which Dynatrace DAVIS will detect and thus raise a problem report based on the Observability data.</p> <p>The logs include span and trace IDs meaning you will be easily able to drill between signal types to see logs in the context of the distributed trace and vice versa.</p>"},{"location":"#how-is-the-problem-created","title":"How is the problem created?","text":"<p>You will release a new feature into production. For demo purposes, this new feature intentionally introduces failure into the system.</p> <p>First you will inform Dynatrace that a change is incoming. This will be done by sending a <code>CUSTOM_CONFIGURATION</code> event to Dynatrace. Then the feature will be enabled by toggling a feature flag.</p> <p>After a few moments, the error will occur. The <code>ERROR</code> logs flowing into Dynatrace will trigger the problem.</p> <p>This demo uses the OpenTelemetry demo application and the Dynatrace OpenTelemetry collector distribution (why might I want to use the Dynatrace OTEL Collector?).</p>"},{"location":"#logical-flow","title":"Logical Flow","text":""},{"location":"#compatibility","title":"Compatibility","text":"Deployment Tutorial Compatible Dynatrace Managed \u2714\ufe0f Dynatrace SaaS \u2714\ufe0f <ul> <li>Click Here to Begin </li> </ul>"},{"location":"access-ui/","title":"4. Access User Interface","text":""},{"location":"access-ui/#access-the-demo-user-interface","title":"Access The Demo User Interface","text":"<p>Tip</p> <p>This step is optional because there is a load generator already running. Observability data will be flowing into Dynatrace.</p> <p>Expose the user interface on port 8080 by port-forwarding:</p> <pre><code>kubectl -n default port-forward svc/my-otel-demo-frontendproxy 8080:8080\n</code></pre> <p>Go to the <code>Ports</code> tab, right click the port <code>8080</code> and choose \"Open in Browser\".</p> <p>You should see the OpenTelemetry demo application.</p> <p></p>"},{"location":"access-ui/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"cleanup/","title":"8. Cleanup","text":"<p>To cleanup resources, go to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token.</p> <ul> <li>What's Next? </li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>You must have the following to use this hands on demo.</p> <ul> <li>A Dynatrace environment (sign up here)</li> <li>A Dynatrace API token (see below)</li> </ul> <p>Save the Dynatrace environment URL without the trailing slash and without the <code>.apps.</code> in the URL:</p> <pre><code>https://abc12345.live.dynatrace.com\n</code></pre>"},{"location":"getting-started/#create-api-token","title":"Create API Token","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>access tokens</code>.</li> <li>Create a new access token with the following permissions:<ul> <li><code>logs.ingest</code></li> <li><code>metrics.ingest</code></li> <li><code>openTelemetryTrace.ingest</code></li> <li><code>events.ingest</code></li> </ul> </li> </ul>"},{"location":"getting-started/#api-token-permissions-explained","title":"API Token Permissions Explained","text":"<ul> <li><code>logs.ingest</code> is required to send log entries into Dynatrace</li> <li><code>events.ingest</code> is required to send the <code>CUSTOM_CONFIGURATION</code> event into Dynatrace</li> </ul>"},{"location":"getting-started/#start-demo","title":"Start Demo","text":"<p>Click this button to open the demo environment. This will open in a new tab.</p> <p></p> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"installation-explained/","title":"3. Installation Explained","text":"<p>The OpenTelemetry demo and the Dynatrace collector will be installed automatically.</p> <p>The Dynatrace details you provided during startup will be encrypted, stored in GitHub secrets and made available as environment variables (hint: <code>printenv</code> to see).</p> <p>They will also be stored in a Kubernetes secret:</p> <pre><code>kubectl get secret/dynatrace-otelcol-dt-api-credentials -o yaml\n</code></pre>"},{"location":"installation-explained/#wait-for-system","title":"Wait for System","text":"<p>Wait for all pods to be Ready (can take up to 10mins)</p> <pre><code>kubectl wait --for condition=Ready pod --timeout=10m --all\n</code></pre> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"introduce-change/","title":"6. Introduce System Change","text":"<p>The application is running correctly. It is time to introduce a change into the system.</p> <p>This simulates releasing new functionality to your users in production.</p>"},{"location":"introduce-change/#inform-dynatrace","title":"Inform Dynatrace","text":"<p>First, inform Dynatrace that a change is about to occur. Namely, you are going to change the <code>cartServiceFailure</code> feature flag from <code>off</code> to <code>on</code>.</p> <p>Tell Dynatrace about the upcoming change by sending an event (note: This event does not actually make the change; you need to do this).</p> <p>A wrapper script to help you with this.</p> <p>Run the following:</p> <pre><code>./runtimeChange.sh cartservice cartServiceFailure on\n</code></pre> <p>Refresh the <code>cartservice</code> page and near the bottom you should see the configuration change event.</p> <p></p>"},{"location":"introduce-change/#make-change","title":"Make Change","text":"<p>Open this file: <code>.devcontainer/otel-demo/flags.yaml</code></p> <p>Change the <code>defaultValue</code> of <code>cartServiceFailure</code> from <code>\"off\"</code> to <code>\"on\"</code> (line Scroll to line <code>75</code>)</p> <p></p> <p>Now apply the change by running this command:</p> <pre><code>kubectl apply -f .devcontainer/otel-demo/flags.yaml\n</code></pre> <ul> <li>Click Here to Begin </li> </ul>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#why-would-i-use-the-dynatrace-otel-collector","title":"Why would I use the Dynatrace OTEL Collector?","text":"<p>See here.</p>"},{"location":"review-problem/","title":"7. Review Problem","text":"<p>Tip</p> <p>Right click each image and \"Open image in new tab\" to see a larger version.</p> <p>After a few moments, DAVIS will detect the issue and create a problem.</p> <p>Press <code>ctrl + k</code> and search for <code>Problems</code> this will open the problems screen.</p> <p>You should see a problem titled: <code>Redis connection errors</code></p> <p></p>"},{"location":"review-problem/#explore-problem-details","title":"Explore Problem Details","text":"<p>Opening the problem record, you will see that it has effected one entity: the <code>cartservice</code>.</p> <p>Navigate to the <code>Logs</code> panel. Click <code>Run query</code> next to <code>Show x errors</code> (your number of errors may differ from the screenshot)</p> <p></p> <p>Expand the log entry and notice you have some key metadata available:</p> <ul> <li>Timestamp of this log line</li> <li><code>host.name</code> (which equates to the container name)</li> <li><code>loglevel</code> ie. <code>ERROR</code></li> <li>OpenTelemetry <code>span_id</code> and <code>trace_id</code></li> </ul> <p></p> <p>Now click <code>Show surrounding logs</code> this shows <code>ALL</code> log lines with the same <code>trace_id</code>.</p> <p>You can also choose <code>based on topology</code> to see the error in context of all other logs on that service at the time of the error.</p> <p>This means you can see precisely what led up to the failure. In this case:</p> <ul> <li>The system retrieved the cart contents</li> <li>A pricing quote was calculated</li> <li>The system performed a currency conversion</li> <li>The user requested to empty their cart</li> <li>The error occured whilst trying to empty the cart</li> </ul> <p></p> <p>Notice that an Error status code and detailed message is also available:</p> <ul> <li>The <code>statuscode</code> is <code>FailedPrecondition</code></li> <li>The <code>detail</code> provides an error message: <code>Can't access cart storage. System.ApplicationException: Wasn't able to connect to redis...</code></li> <li>The <code>detail</code> field also provides a reference to the line of code (LOC) where this error occured.</li> </ul> <p></p>"},{"location":"review-problem/#navigate-from-log-to-trace","title":"Navigate from Log to Trace","text":"<p>In this demo application logs, spans and traces are all correctly instrumented with the <code>span_id</code> and <code>trace_id</code> field. Meaning logs can be correlated and linked to traces.</p> <p>Let's navigate from the log line to the trace view to get a wider view of the error and what hte user was trying to do during this action.</p> <ul> <li>Click the value field of the <code>trace_id</code>. This should open the <code>Explore</code> context menu.</li> <li>Select <code>Open field with</code> (<code>open record with</code> also opens the trace but \"jumps\" you down the trace to the error location)</li> <li>Choose to open with the <code>Distributed traces</code> app</li> </ul> <p> </p> <p>The trace view gives a deeper, more contextual view of what we've already seen from the logs.</p> <p>The user tries to place an order, there are currency conversions and quotations occurring. Finally the <code>EmptyCart</code> method is called, which fails.</p> <p></p>"},{"location":"review-problem/#reveal-the-root-cause","title":"Reveal the root cause","text":"<p>DAVIS told us (and our investigation confirmed) that the problem originated in the <code>cartservice</code>.</p> <p>We know that the problem was caused by a failure to connect to Redis. We can guess that it was due to the feature flag change we made.</p> <p>However, beyond a demo scenario, in a realistic, complex system, there are many moving parts. Let's see what Dynatrace can tell us about what was happening with (and to) the <code>cartservice</code> around the time of the failure.</p> <p>Navigate back to the <code>cartservice</code> screen. You can do so either by:</p> <ul> <li>Selecting a span in the trace which is attributed to cartservice. Then click the blue hyperlink to take you to the <code>cartservice</code> page</li> <li>Press <code>ctrl + k</code> search for <code>Services</code> and navigate to the <code>cartservice</code> entity</li> </ul> <p>Scroll to the bottom of the <code>cartservice</code> page until you see the <code>Events</code> table.</p> <p>Notice the <code>configuration change</code> event which immediately preceeds the <code>App cannot connect to redis</code> event.</p> <p>Change is the cause of most failures</p> <p>Something changed on the <code>cartservice</code> immediately prior to an issue occuring.</p> <p>Thanks to the \"configuration changed\" event we have all necessary information to understand the true root cause.</p> <p> </p> <p>\ud83c\udf89Congratulations \ud83c\udf89</p> <p>You have successfully completed this Observability Lab. Continue below to clean up your environment.</p> <ul> <li>Click Here to Begin </li> </ul>"},{"location":"view-observability-data/","title":"5. Validate Observability Data","text":"<p>In Dynatrace, press <code>ctrl + k</code> and search for <code>Services</code>. Dynatrace creates service entities based on the incoming span data. The logs are also available for each service.</p> <p>You can also query data via notebooks and dashboards (<code>ctrl + k</code> and search for <code>notebooks</code> or <code>dashboards</code>).</p> <ul> <li>Click Here to Continue </li> </ul>"},{"location":"whats-next/","title":"10. What's Next?","text":"<p>Content here about what the user should do, where they should and what they could learn next.</p>"}]}